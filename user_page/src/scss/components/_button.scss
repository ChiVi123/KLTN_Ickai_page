@use '../abstracts/color-v' as color;
@use '../abstracts/button-v' as button;
@use '../abstracts/spacing-m' as spacing;

.btn {
    --btn-min-width: #{button.$width-md};
    --btn-height: #{button.$height-md};
    --btn-font-size: #{button.$text-md};

    min-width: var(--btn-min-width);
    height: var(--btn-height);
    @include spacing.spacing-x(padding, button.$padding-x);
    border-color: var(--btn-bd-color, transparent);
    border-radius: button.$border-radius;
    background-color: var(--btn-bg-color, transparent);
    color: var(--btn-color, #{color.$gray-color});
    font-size: var(--btn-font-size);
    font-weight: 500;
    transition: background-color 600ms, color 300ms, border-color;

    &.full {
        width: 100%;
    }

    &.disabled {
        opacity: 0.4;
        pointer-events: none;
    }

    &[href] {
        display: inline-block;
        line-height: var(--btn-height);
        text-align: center;
    }
}

@each $size, $width in button.$widths {
    .btn-#{$size} {
        --btn-min-width: #{$width};
        --btn-height: #{map-get(button.$heights, $size)};
        --btn-font-size: #{map-get(button.$texts, $size)};
    }
}

@each $variant in button.$variants {
    $is-contained: $variant == contained;
    $is-outlined: $variant == outlined;
    $infix: if($is-contained, '', #{-$variant});

    @each $color-name, $color in button.$colors {
        .btn#{$infix}-#{$color-name} {
            @if $is-outlined {
                --btn-bd-color: #{$color};
            }

            @if $is-contained {
                --btn-bg-color: #{$color};
            }

            --btn-color: #{if($is-contained, #{color.$white}, #{$color})};

            &:hover {
                @if not $is-contained {
                    --btn-color: #{color.$white};
                }
                --btn-bg-color: #{map-get(button.$hover-colors, $color-name)};
            }
        }
    }
}
